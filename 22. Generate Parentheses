class Solution {
    public List<String> generateParenthesis(int n) {
        if(n == 0) return new ArrayList<String>();
        List<String> ans = new ArrayList<String>();
        int count = 1;
        int limit = n-1;
        String initial = "(";
        DFS(n,count,ans,initial,limit);
        return ans;
    }
    private void DFS(int n, int count, List<String> ans, String temp, int limit) {
        if(temp.length() == 2*n) {
            ans.add(temp);
            return;
        }
        if(count > 0) {
//            count--;
            DFS(n,count-1,ans,temp+")",limit);
        }
        if(count < n && limit > 0) {
            // count++;
            // limit--;
            DFS(n,count+1,ans,temp+"(",limit-1);
        }
    }
}
